#include <stdio.h>
#include <stdint.h>

// PC1: Permuted Choice 1 (Selects 56 bits from 64-bit key)
int PC1[] = { 57, 49, 41, 33, 25, 17,  9,
               1, 58, 50, 42, 34, 26, 18,
              10,  2, 59, 51, 43, 35, 27,
              19, 11,  3, 60, 52, 44, 36,
              63, 55, 47, 39, 31, 23, 15,
               7, 62, 54, 46, 38, 30, 22,
              14,  6, 61, 53, 45, 37, 29,
              21, 13,  5, 28, 20, 12,  4 };

// PC2: Permuted Choice 2 (Selects 48 bits from 56-bit key)
int PC2[] = { 14, 17, 11, 24,  1,  5,
               3, 28, 15,  6, 21, 10,
              23, 19, 12,  4, 26,  8,
              16,  7, 27, 20, 13,  2,
              41, 52, 31, 37, 47, 55,
              30, 40, 51, 45, 33, 48,
              44, 49, 39, 56, 34, 53,
              46, 42, 50, 36, 29, 32 };

// Key shifts for each round
int KEY_SHIFTS[] = { 1, 1, 2, 2, 2, 2, 2, 2,
                     1, 2, 2, 2, 2, 2, 2, 1 };

// Left circular shift
uint32_t leftShift(uint32_t value, int shifts) {
    return ((value << shifts) | (value >> (28 - shifts))) & 0xFFFFFFF; // Mask 28 bits
}

// Permutation function
uint64_t permute(uint64_t input, const int *table, int size) {
    uint64_t output = 0;
    for (int i = 0; i < size; i++) {
        output <<= 1;
        output |= (input >> (64 - table[i])) & 1;
    }
    return output;
}

// Generate the 16 subkeys
void generateSubkeys(uint64_t key, uint64_t subkeys[16]) {
    // Permute the key using PC1
    uint64_t permutedKey = permute(key, PC1, 56);

    // Split into two 28-bit halves
    uint32_t C = (permutedKey >> 28) & 0xFFFFFFF; // Left 28 bits
    uint32_t D = permutedKey & 0xFFFFFFF;         // Right 28 bits

    // Generate 16 subkeys
    for (int i = 0; i < 16; i++) {
        // Perform the left shift
        C = leftShift(C, KEY_SHIFTS[i]);
        D = leftShift(D, KEY_SHIFTS[i]);

        // Combine C and D into a 56-bit value
        uint64_t combined = ((uint64_t)C << 28) | D;

        // Permute using PC2 to get the subkey
        subkeys[i] = permute(combined, PC2, 48);

        // Print subkey breakdown for the first and second 24 bits
        uint32_t first24 = (subkeys[i] >> 24) & 0xFFFFFF; // First 24 bits
        uint32_t second24 = subkeys[i] & 0xFFFFFF;        // Second 24 bits
        printf("Subkey %2d: First 24 bits: %06X, Second 24 bits: %06X\n", i + 1, first24, second24);
    }
}

int main() {
    // Example 64-bit key (user-defined)
    uint64_t key = 0x133457799BBCDFF1;

    // Store 16 subkeys
    uint64_t subkeys[16];

    // Generate the subkeys
    generateSubkeys(key, subkeys);

    return 0;
}
