#include <stdio.h>
#include <stdint.h>

// Simplified block cipher for demonstration (e.g., a basic XOR encryption with a key)
uint64_t encryptBlock(uint64_t plaintext, uint64_t key) {
    return plaintext ^ key;
}

uint64_t decryptBlock(uint64_t ciphertext, uint64_t key) {
    return ciphertext ^ key;
}

// ECB Mode Encryption
void ecbEncrypt(uint64_t *plaintext, uint64_t *ciphertext, int blockCount, uint64_t key) {
    for (int i = 0; i < blockCount; i++) {
        ciphertext[i] = encryptBlock(plaintext[i], key);
    }
}

// ECB Mode Decryption
void ecbDecrypt(uint64_t *ciphertext, uint64_t *plaintext, int blockCount, uint64_t key) {
    for (int i = 0; i < blockCount; i++) {
        plaintext[i] = decryptBlock(ciphertext[i], key);
    }
}

// CBC Mode Encryption
void cbcEncrypt(uint64_t *plaintext, uint64_t *ciphertext, int blockCount, uint64_t iv, uint64_t key) {
    uint64_t prevCipherBlock = iv;

    for (int i = 0; i < blockCount; i++) {
        uint64_t block = plaintext[i] ^ prevCipherBlock; // XOR with previous ciphertext or IV
        ciphertext[i] = encryptBlock(block, key);
        prevCipherBlock = ciphertext[i]; // Update previous ciphertext
    }
}

// CBC Mode Decryption
void cbcDecrypt(uint64_t *ciphertext, uint64_t *plaintext, int blockCount, uint64_t iv, uint64_t key) {
    uint64_t prevCipherBlock = iv;

    for (int i = 0; i < blockCount; i++) {
        uint64_t decryptedBlock = decryptBlock(ciphertext[i], key);
        plaintext[i] = decryptedBlock ^ prevCipherBlock;
        prevCipherBlock = ciphertext[i]; // Update previous ciphertext
    }
}

// Simulate Error in Ciphertext
void introduceError(uint64_t *data, int blockIndex, uint64_t errorMask) {
    data[blockIndex] ^= errorMask;
}

// Print blocks in hexadecimal
void printBlocks(const char *label, uint64_t *blocks, int count) {
    printf("%s:\n", label);
    for (int i = 0; i < count; i++) {
        printf("Block %d: %016llX\n", i + 1, blocks[i]);
    }
    printf("\n");
}

int main() {
    // Example plaintext blocks
    uint64_t plaintext[] = { 0x0123456789ABCDEF, 0xFEDCBA9876543210, 0x0F1E2D3C4B5A6978 };
    int blockCount = sizeof(plaintext) / sizeof(plaintext[0]);

    // Encryption key and IV
    uint64_t key = 0x133457799BBCDFF1;
    uint64_t iv = 0xAABB09182736CCDD;

    // Arrays for ciphertext and decrypted plaintext
    uint64_t ecbCiphertext[blockCount], ecbDecrypted[blockCount];
    uint64_t cbcCiphertext[blockCount], cbcDecrypted[blockCount];

    // Perform ECB encryption and decryption
    ecbEncrypt(plaintext, ecbCiphertext, blockCount, key);
    ecbDecrypt(ecbCiphertext, ecbDecrypted, blockCount, key);

    // Perform CBC encryption and decryption
    cbcEncrypt(plaintext, cbcCiphertext, blockCount, iv, key);
    cbcDecrypt(cbcCiphertext, cbcDecrypted, blockCount, iv, key);

    // Print results
    printBlocks("Original Plaintext", plaintext, blockCount);
    printBlocks("ECB Ciphertext", ecbCiphertext, blockCount);
    printBlocks("CBC Ciphertext", cbcCiphertext, blockCount);

    // Introduce error in the first ciphertext block
    introduceError(ecbCiphertext, 0, 0xFFFFFFFFFFFFFFFF);
    introduceError(cbcCiphertext, 0, 0xFFFFFFFFFFFFFFFF);

    // Decrypt with errors
    ecbDecrypt(ecbCiphertext, ecbDecrypted, blockCount, key);
    cbcDecrypt(cbcCiphertext, cbcDecrypted, blockCount, iv, key);

    // Print results after introducing errors
    printf("After Introducing Error:\n");
    printBlocks("ECB Decrypted with Error", ecbDecrypted, blockCount);
    printBlocks("CBC Decrypted with Error", cbcDecrypted, blockCount);

    return 0;
}
