#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Function to count character frequencies
void countFrequencies(const char *ciphertext, int freq[256]) {
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        if (!isspace(ciphertext[i])) {
            freq[(unsigned char)ciphertext[i]]++;
        }
    }
}

// Function to print frequency analysis
void printFrequencies(int freq[256]) {
    printf("Character frequencies:\n");
    for (int i = 0; i < 256; i++) {
        if (freq[i] > 0) {
            printf("%c: %d\n", i, freq[i]);
        }
    }
}

// Function to decipher using a substitution key
void decipher(const char *ciphertext, char *plaintext, char substitution[256]) {
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        if (isspace(ciphertext[i]) || ispunct(ciphertext[i])) {
            plaintext[i] = ciphertext[i]; // Keep spaces and punctuation unchanged
        } else {
            plaintext[i] = substitution[(unsigned char)ciphertext[i]];
        }
    }
    plaintext[strlen(ciphertext)] = '\0'; // Null-terminate the string
}

int main() {
    // Ciphertext
    const char *ciphertext = "53‡‡†305))6*;4826)4‡.)4‡);806*;48†8¶60))85;;]8*;:‡*8†83(88)5*†;46(;88*96*?;8)*‡(;485);5*†2:*‡(;4956*2(5*—4)8¶8*;4069285);)6†8)4‡‡;1(‡9;48081;8:8‡1;48†85;4)485†528806*81(‡9;48;(88;4(‡?34;48)4‡;161;:188;‡?;";

    // Frequency analysis
    int freq[256] = {0};
    countFrequencies(ciphertext, freq);
    printFrequencies(freq);

    // Substitution key (fill as you analyze)
    // Initialize with identity mapping (no change)
    char substitution[256];
    for (int i = 0; i < 256; i++) {
        substitution[i] = i;
    }

    // Example substitutions based on guesses (to be refined)
    substitution['‡'] = 'e'; // Most frequent character -> 'e'
    substitution['5'] = 't'; // Part of "the"
    substitution['3'] = 'h'; // Part of "the"
    substitution['†'] = 'a'; // Guessed from patterns
    substitution['*'] = 'o'; // Guessed from patterns
    substitution['6'] = 'n'; // Guessed from patterns

    // Deciphered text
    char plaintext[strlen(ciphertext) + 1];
    decipher(ciphertext, plaintext, substitution);

    // Output
    printf("\nCiphertext: %s\n", ciphertext);
    printf("Deciphered text: %s\n", plaintext);

    return 0;
}
