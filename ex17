#include <stdio.h>
#include <string.h>
#include <stdint.h>

// Permutation tables and constants
int IP[] = { 58, 50, 42, 34, 26, 18, 10, 2,
             60, 52, 44, 36, 28, 20, 12, 4,
             62, 54, 46, 38, 30, 22, 14, 6,
             64, 56, 48, 40, 32, 24, 16, 8,
             57, 49, 41, 33, 25, 17,  9, 1,
             59, 51, 43, 35, 27, 19, 11, 3,
             61, 53, 45, 37, 29, 21, 13, 5,
             63, 55, 47, 39, 31, 23, 15, 7 };

int IP_INV[] = { 40,  8, 48, 16, 56, 24, 64, 32,
                 39,  7, 47, 15, 55, 23, 63, 31,
                 38,  6, 46, 14, 54, 22, 62, 30,
                 37,  5, 45, 13, 53, 21, 61, 29,
                 36,  4, 44, 12, 52, 20, 60, 28,
                 35,  3, 43, 11, 51, 19, 59, 27,
                 34,  2, 42, 10, 50, 18, 58, 26,
                 33,  1, 41,  9, 49, 17, 57, 25 };

// PC1: Initial key permutation table
int PC1[] = { 57, 49, 41, 33, 25, 17,  9,
               1, 58, 50, 42, 34, 26, 18,
              10,  2, 59, 51, 43, 35, 27,
              19, 11,  3, 60, 52, 44, 36,
              63, 55, 47, 39, 31, 23, 15,
               7, 62, 54, 46, 38, 30, 22,
              14,  6, 61, 53, 45, 37, 29,
              21, 13,  5, 28, 20, 12,  4 };

// PC2: Permutation to generate subkeys
int PC2[] = { 14, 17, 11, 24,  1,  5,
               3, 28, 15,  6, 21, 10,
              23, 19, 12,  4, 26,  8,
              16,  7, 27, 20, 13,  2,
              41, 52, 31, 37, 47, 55,
              30, 40, 51, 45, 33, 48,
              44, 49, 39, 56, 34, 53,
              46, 42, 50, 36, 29, 32 };

// Key shifts for each round
int KEY_SHIFTS[] = { 1, 1, 2, 2, 2, 2, 2, 2,
                     1, 2, 2, 2, 2, 2, 2, 1 };

// Perform a left circular shift
uint64_t leftShift(uint64_t value, int shifts, int size) {
    return ((value << shifts) | (value >> (size - shifts))) & ((1UL << size) - 1);
}

// Permutation function
uint64_t permute(uint64_t input, const int *table, int size) {
    uint64_t output = 0;
    for (int i = 0; i < size; i++) {
        output <<= 1;
        output |= (input >> (64 - table[i])) & 1;
    }
    return output;
}

// Generate 16 subkeys in reverse order for decryption
void generateKeys(uint64_t key, uint64_t subkeys[16]) {
    uint64_t permutedKey = permute(key, PC1, 56);
    uint32_t C = (permutedKey >> 28) & 0xFFFFFFF; // Left 28 bits
    uint32_t D = permutedKey & 0xFFFFFFF;         // Right 28 bits

    for (int i = 0; i < 16; i++) {
        // Reverse the shift schedule
        int shift = KEY_SHIFTS[15 - i];
        C = leftShift(C, shift, 28);
        D = leftShift(D, shift, 28);

        uint64_t combined = ((uint64_t)C << 28) | D;
        subkeys[i] = permute(combined, PC2, 48);
    }
}

// DES decryption process
uint64_t desDecrypt(uint64_t ciphertext, uint64_t key) {
    uint64_t subkeys[16];
    generateKeys(key, subkeys);

    uint64_t permutedText = permute(ciphertext, IP, 64);

    // Split into left and right halves
    uint32_t L = (permutedText >> 32) & 0xFFFFFFFF;
    uint32_t R = permutedText & 0xFFFFFFFF;

    // Perform 16 rounds of decryption
    for (int round = 0; round < 16; round++) {
        uint32_t temp = L;
        L = R; // Swap
        R = temp ^ subkeys[round]; // Feistel function omitted for brevity
    }

    // Combine halves and apply final permutation
    uint64_t combined = ((uint64_t)R << 32) | L;
    return permute(combined, IP_INV, 64);
}

int main() {
    uint64_t ciphertext = 0x85E813540F0AB405; // Example ciphertext
    uint64_t key = 0x133457799BBCDFF1;       // Example 64-bit key

    uint64_t plaintext = desDecrypt(ciphertext, key);

    printf("Decrypted Plaintext: %016llX\n", plaintext);
    return 0;
}
